created: 20220228172201625
creator: toreglia
link: https://doc.rust-lang.org/book/title-page.html
modified: 20220309173652093
modifier: toreglia
tags: rust-programming-language software notes Live research
title: Rust
type: text/vnd.tiddlywiki

! Hello, World!
* Rust files always end with the .rs extension
* Use underscores for multi-world file names
* define a function:<span>

```
fn main(<parameters>) {}
```
</span>
* there is an automatic formatter tool called rustfmt to format your code in a particular style
* Rust style is to indent with four spaces, not a tab
* using a ! means that you’re calling a macro instead of a normal function
* end rust lines with a semicolon

! Hello, Cargo!
* Cargo is Rust’s build system and package manager. 
!! Cargo.toml
* [package], is a section heading that indicates that the following statements are configuring a package
* [dependencies], is the start of a section for you to list any of your project’s dependencies
* In Rust, packages of code are referred to as //crates//
* `cargo check` checks your code to make sure it compiles but doesn’t produce an executable
* `cargo build` to build a program
* `cargo run` to build and run a program


! Programming a Guessing Game
* `let` statement to create the variable
*  To make a variable mutable, we add `mut` before the variable name
* `String::new` is a function that returns a new instance of a `String` type
* use `&` to pass by reference
* use `&mut` to pass by reference and have it be mutable
* The `Result` types are enumerations, often referred to as //enums//, which can have a fixed set of possibilities known as //variants//
** nums are often used with match, a conditional that makes it convenient to execute different code based on which variant an enum value is when the conditional is evaluated.
** `Result` type is for error handling 
** `Result` can be variants are `Ok` or `Err`
* when printing use `{}` as a placeholder for a variable, this is for any type (apparently)
* running the cargo doc --open command will build documentation provided by all of your dependencies locally and open it in your browser
* use `cmp` to compare any comparable value. It's a method to be called on a value, and it takes a reference to another value as argument
* there are `match` expressions which has `arms`. Each `arm` is a possible value (like a switch statement), along with the code to run if that is the case

! Common Programming Concepts
!! Variables and Mutability
* be default rust variables are immutable
* use the `mut` keyword to make an immutable var
* use the `const` keyword to make a const 
** can be declared in global scope
** limited operations possible at compile time for assigning values to const'
** always immutable
* variables can be shadowed, in which case the type can also change (not so with mutable variables)
** shadowed variable only holds new value in current scope

!! Data Types
* Four Scalar types -- single value
*# integer
*# floating-point
*# Boolean
*# character



!! Lexicon
; variant
: possible value of an enum

; type

; enums

; types

; method
: function 

; crate
: a collection of Rust source code files

; trait (ch 10)
: 

